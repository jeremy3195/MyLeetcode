题目描述：
  给定一个整数数组 nums 和一个整数目标值 target，请你在该数组中找出 和为目标值 的那 两个 整数，并返回它们的数组下标。
  你可以假设每种输入只会对应一个答案。但是，数组中同一个元素在答案里不能重复出现。
  你可以按任意顺序返回答案。
  
示例 1：
输入：nums = [2,7,11,15], target = 9
输出：[0,1]
解释：因为 nums[0] + nums[1] == 9 ，返回 [0, 1] 。

示例 2：
输入：nums = [3,2,4], target = 6
输出：[1,2]

示例 3：
输入：nums = [3,3], target = 6
输出：[0,1]

来源：力扣（LeetCode）
链接：https://leetcode-cn.com/problems/two-sum
著作权归领扣网络所有。商业转载请联系官方授权，非商业转载请注明出处。
------------------------------------------------------------------------------------------------
我的答案（Java）：
  import java.util.*;
class Solution {

    public static void main(String args[]){
        Scanner s = new Scanner(System.in);
        //控制台输入四个数字作为数组数据
        int i1 = s.nextInt();
        int i2 = s.nextInt();
        int i3 = s.nextInt();
        int i4 = s.nextInt();
        //控制台输入目标和
        int t = s.nextInt();
        //静态定义定长数组（4），并放入元素
        int [] nums = {i1,i2,i3,i4};
        
        //实例化
        Solution slt = new Solution();
        //调用twoSum（）函数，并输出
        System.out.println("["+slt.twoSum(nums,t)[0]+","+slt.twoSum(nums,t)[1]+"]");

    }


    public int[] twoSum(int[] nums, int target) {
        //定义一个长度为2的数组，里面放目标得到的两数在nums数组的下标
        int [] result = new int[2];
        //嵌套遍历nums数组，拿到两个目标数
        for(int i=0; i<nums.length; i++){
            for(int j = 0; j < nums.length; j++){
                if(nums[i] + nums[j] == target){
                    result[0] = i;
                    result[1] = j;
                    //得到之后退出循环
                    break;
                }

            }

        }
        return result;
    }
}

执行用时：
18 ms, 在所有 Java 提交中击败了5.78%的用户.
内存消耗：
38.7 MB, 在所有 Java 提交中击败了43.87%的用户.
结果太拉了。
-----------------------------------------------------------------------------------------
吊人的题解：
方法一：暴力枚举
思路及算法
  最容易想到的方法是枚举数组中的每一个数 x，寻找数组中是否存在 target - x。
  当我们使用遍历整个数组的方式寻找 target - x 时，需要注意到每一个位于 x 之前的元素都已经和 x 匹配过，因此不需要再进行匹配。而每一个元素不能被使用两次，所以我们只需要在 x 后面的元素中寻找 target - x。

  class Solution {
    public int[] twoSum(int[] nums, int target) {
        //获取nums长度n
        int n = nums.length;
        //也是双层循环，但是第二层不必再从0开始遍历！
        for (int i = 0; i < n; ++i) {
            for (int j = i + 1; j < n; ++j) {
                if (nums[i] + nums[j] == target) {
                    return new int[]{i, j};
                }
            }
        }
        //如果没有return 0
        return new int[0];
    }
}

复杂度分析

时间复杂度：O(N^2)，其中 N 是数组中的元素数量。最坏情况下数组中任意两个数都要被匹配一次。
空间复杂度：O(1)。

作者：LeetCode-Solution
链接：https://leetcode-cn.com/problems/two-sum/solution/liang-shu-zhi-he-by-leetcode-solution/
来源：力扣（LeetCode）
著作权归作者所有。商业转载请联系作者获得授权，非商业转载请注明出处。
-------------------------------------------------------------------------------------------
方法二：哈希表
思路及算法：

注意到方法一的时间复杂度较高的原因是寻找 target - x 的时间复杂度过高。
因此，我们需要一种更优秀的方法，能够快速寻找数组中是否存在目标元素。如果存在，我们需要找出它的索引。

使用哈希表，可以将寻找 target - x 的时间复杂度降低到从 O(N)降低到 O(1)。

这样我们创建一个哈希表，对于每一个 x，我们首先查询哈希表中是否存在 target - x，然后将 x 插入到哈希表中，即可保证不会让 x 和自己匹配。

class Solution {
    public int[] twoSum(int[] nums, int target) {
        //定义hashMap
        Map<Integer, Integer> hashtable = new HashMap<Integer, Integer>();
        //只循环一次
        for (int i = 0; i < nums.length; ++i) {
            if (hashtable.containsKey(target - nums[i])) {
                return new int[]{hashtable.get(target - nums[i]), i};
            }
         
            hashtable.put(nums[i], i);
        }
        return new int[0];
    }
}
注：
put() 方法将指定的键/值对插入到 HashMap 中。
put() 方法的语法为：
  hashmap.put（K key，V value）
get()方法：
  hashmap.get(K key)   —————get到返回的是key对应的value












