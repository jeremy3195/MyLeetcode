题目描述：
  给定一个只包括 '('，')'，'{'，'}'，'['，']' 的字符串 s ，判断字符串是否有效。

有效字符串需满足：
左括号必须用相同类型的右括号闭合。
左括号必须以正确的顺序闭合。
 

示例 1：
输入：s = "()"
输出：true

示例 2：
输入：s = "()[]{}"
输出：true

示例 3：
输入：s = "(]"
输出：false

示例 4：
输入：s = "([)]"
输出：false

示例 5：
输入：s = "{[]}"
输出：true
-----------------------------------------------------------------------------
我的解法：
class Solution {
    public boolean isValid(String s) {
        //System.out.println(s.toCharArray);
        char buckets [] = s.toCharArray();

        if(buckets.length % 2 != 0){
            return false;
        }
        else{
            if(buckets.length == 2){
                if(buckets[0] == '(' && buckets[1] == ')'||buckets[0] == '[' && buckets[1] == ']' || buckets[0] == '{' && buckets[1] == '}'){
                    return true;
                }
                else {
                    return false;
                }
            }
            else{
                for(int i = 0; i < buckets.length; i++){
                    if(buckets[0] == ')' || buckets[0] == ']' || buckets[0] == '}'){
                        return false;
                    }
                    if(buckets[buckets.length-1] == '(' || buckets[buckets.length-1] == '[' || buckets[buckets.length-1] == '{'){
                        return false;
                    }
                    if(i > 0){
                        int j = i;
                        while(buckets[j-1] == 0){
                            j--;
                            if(j == 0) {
                                j = j + 1;
                                break;
                            }
                        }
                        if((buckets[i] == ')' && buckets[j-1] == '(') ||(buckets[i] == ']' && buckets[j-1] == '[')||(buckets[i] == '}' && buckets[j-1] == '{')){
                            buckets[i] = 0;
                            buckets[j-1] = 0;
                        }
                        else{
                            continue;
                        }
                    }
                }
                if(buckets[0] == 0 && buckets[buckets.length-1]==0){
                    return true;
                }
            }
            //System.out.println(buckets.length);
            return false;
        }


    }

}
-------------------------------------------------------------------------------------------------
吊人思路1：
class Solution {
    public boolean isValid(String s) {
        int length = s.length() / 2;
		for (int i = 0; i < length; i++) {
			s = s.replace("()", "").replace("{}", "").replace("[]", "");
		}

		return s.length() == 0;
    }
}
-------------------------------------------------------------------------------------------
吊人思路2：
class Solution {
    public boolean isValid(String s) {
        Stack<Character>stack = new Stack<Character>();
        for(char c: s.toCharArray()){
            if(c=='(')stack.push(')');
            else if(c=='[')stack.push(']');
            else if(c=='{')stack.push('}');
            else if(stack.isEmpty()||c!=stack.pop())return false;
        }
        return stack.isEmpty();
    }
}




















