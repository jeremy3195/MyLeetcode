问题描述：
将两个升序链表合并为一个新的 升序 链表并返回。新链表是通过拼接给定的两个链表的所有节点组成的。 
示例 1：
输入：l1 = [1,2,4], l2 = [1,3,4]
输出：[1,1,2,3,4,4]

示例 2：
输入：l1 = [], l2 = []
输出：[]

示例 3：
输入：l1 = [], l2 = [0]
输出：[0]
 

提示：
两个链表的节点数目范围是 [0, 50]
-100 <= Node.val <= 100
l1 和 l2 均按 非递减顺序 排列
======================================================================================
解释：以下是ListNode的定义
  /**
 * Definition for singly-linked list.
 * public class ListNode {
 *     int val;
 *     ListNode next;
 *     ListNode() {}
 *     ListNode(int val) { this.val = val; }
 *     ListNode(int val, ListNode next) { this.val = val; this.next = next; }
 * }
 */
 ListNode由两个属性，分别是自身的值val，以及指向的下一个ListNode。所以由此可知，多个ListNode连接到一起形成一个LinkList链表。
 
 题目中给的l1的值val等于1，l1的next的ListNode值是2，再下一个ListNode值是4；
 同理可得，l2的值val等于1，l2的next的ListNode值是3，再下一个ListNode值是4.
 
 =============================================================================================
 解法：
 
 public ListNode mergeTwoLists(ListNode l1, ListNode l2) {
        // 类似归并排序中的合并过程
        //定义头结点
        ListNode dummyHead = new ListNode(0);
        //定义当前结点
        ListNode cur = dummyHead;
        
        while (l1 != null && l2 != null) {
            //如果l1的val小于l2的val，那么当前结点（也是头结点）的下一个结点就是l1.然后当前结点不再是头结点，而是l1（往下走一个结点），l1也往下走一个结点。
            if (l1.val < l2.val) {
                cur.next = l1;
                cur = cur.next;
                l1 = l1.next;
            }
            //l2同理！cur就是找更小的那个
            else {
                cur.next = l2;
                cur = cur.next;
                l2 = l2.next;
            }
        }
        // 任一为空，直接连接另一条链表
        if (l1 == null) {
            cur.next = l2;
        } else {
            cur.next = l1;
        }
        //最后返回头结点。头结点的一路往下next就是排序之后的合并链表啦~
        return dummyHead.next;
    }
 
 
 
 
 
 
 
 
 
 
