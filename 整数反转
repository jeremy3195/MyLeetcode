题目描述：

给你一个 32 位的有符号整数 x ，返回将 x 中的数字部分反转后的结果。
如果反转后整数超过 32 位的有符号整数的范围 [−2^31,  2^31 − 1] ，就返回 0。
假设环境不允许存储 64 位整数（有符号或无符号）。

示例 1：

输入：x = 123
输出：321
示例 2：

输入：x = -123
输出：-321
示例 3：

输入：x = 120
输出：21
示例 4：

输入：x = 0
输出：0

-----------------------------------------------------------------------------------------------
我的答案：
  import java.util.*;
class Solution {
    public static void main(String[] args) {
        Solution s = new Solution();
        Scanner s1 = new Scanner(System.in);
        int x = s1.nextInt();
        int result = 0;
        result = s.reverse(x);
        System.out.println(result);
    }
//----------------------------------------------------------
    public int reverse(int x) {
        int sum = 0;
        //判断目标x为正数
        if(x > 0) {
            //遍历得到x的位数sum
            for (int i = 0; i <= 9; i++) {
                int y = (int) Math.pow(10, i);
                if (x / y < 10) {
                    sum = i + 1;
                    break;
                }
            }
            //得到反转后的x：array，蠢的批爆
            long array = 0;
            for (int j = sum - 1; j >= 0; j--) {
                int p = x / (int) Math.pow(10, j);
                x = x - p * (int) Math.pow(10, j);
                //System.out.println(p);
                array += p * (long) Math.pow(10, sum - j - 1);
            }
            //强转array，若溢出则返回0
            return (int)array == array ? (int)array:0;
        }
        //若x为负数，就先翻过来求相对数，按照上面的方法，得到结果最后再取反，蠢上加蠢
        else if(x < 0){
            int cnm = 0 - x;
            for(int i = 0; i <= 9; i++){
                int y = (int)Math.pow(10 , i);
                if(cnm / y < 10){
                    sum = i+1;
                    break;
                }
            }
            long array = 0;
            long array1 = 0;
            for(int j = sum-1; j >= 0; j --){
                int p = cnm / (int)Math.pow(10 , j);
                cnm = cnm - p*(int)Math.pow(10 , j);
                //System.out.println(p);
                array += p*(long)Math.pow(10 , sum-j-1);
                array1 = 0 - array;
            }
            return (int)array1 == array1 ? (int)array1:0;

        }
        //x等于0直接返回0
        else{
            return 0;
        }

    }
}

执行用时：3 ms, 在所有 Java 提交中击败了16.97%的用户.
内存消耗：35 MB, 在所有 Java 提交中击败了99.91%的用户.

----------------------------------------------------------------------------------------------------
吊人解法：
可以直接存一个临时的翻转结果，如果这个翻转结果除以10不等于上一个结果，说明有溢出。 这种做法相对简洁易懂一些。仅限java。

class Solution {
    public int reverse(int x) {
        int res = 0;
        while (x != 0) {
            int tmp = res * 10 + x % 10;
            if (tmp / 10 != res) { // 溢出!!!
                return 0;
            }
            res = tmp;
            x /= 10;
        }
        return res;
    }
}















